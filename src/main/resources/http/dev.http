### Test API health
GET {{url}}/auth/test

### Register new user
POST {{url}}/auth/register
Content-Type: application/json

{
  "name": "Test User",
  "email": "test@test.dk",
  "password": "test123",
  "roleType": "USER"
}

> {% client.global.set("auth_token", response.body.token); %}



### Login user
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "test@test.dk",
  "password": "test123"
}

> {% client.global.set("auth_token", response.body.token); %}


### Add admin role to user
POST {{url}}/auth/user/addrole
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "role": "ADMIN"
}

### Reset token
GET {{url}}/auth/test/

> {%
    client.global.set("jwt_token", null);
    console.log("JWT Token:", client.global.get("jwt_token"));
%}



### Test protected user endpoint
GET {{url}}/protected/user_demo
Authorization: Bearer {{auth_token}}

### Test protected admin endpoint
GET {{url}}/protected/admin_demo
Authorization: Bearer {{auth_token}}

### Store API Tests ###

### Get all stores (public)
GET {{url}}/stores
Accept: application/json

### Get specific store (public)
GET {{url}}/stores/1
Accept: application/json

### Create new store (requires admin)
POST {{url}}/stores
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "sallingStoreId": "1234",
  "name": "Netto Østerbro",
  "brand": "NETTO",
  "address": {
    "addressLine": "Østerbrogade 140",
    "longitude": 12.5683,
    "latitude": 55.7317,
    "postalCode": {
      "postalCode": 2100,
      "city": "København Ø"
    }
  },
  "hasProductsInDb": false
}

### Update store (requires admin)
PUT {{url}}/stores/1
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "sallingStoreId": "1234",
  "name": "Netto Østerbro (Updated)",
  "brand": "NETTO",
  "address": {
    "addressLine": "Østerbrogade 140",
    "longitude": 12.5683,
    "latitude": 55.7317,
    "postalCode": {
      "postalCode": 2100,
      "city": "København Ø"
    }
  },
  "hasProductsInDb": true
}

### Validation Tests ###

### Create store with missing fields (should fail)
POST {{url}}/stores
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "name": "Invalid Store"
}

### Create store with invalid postal code (should fail)
POST {{url}}/stores
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "sallingStoreId": "9999",
  "name": "Invalid Store",
  "brand": "NETTO",
  "address": {
    "addressLine": "Test Address",
    "postalCode": {
      "postalCode": 99999,
      "city": "Invalid City"
    }
  }
}
